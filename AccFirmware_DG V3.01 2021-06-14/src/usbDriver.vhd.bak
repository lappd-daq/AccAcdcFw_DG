---------------------------------------------------------------------------------
-- Univ. of Chicago HEP / electronics design group
--    -- + KICP 2015 --
--
-- PROJECT:      
-- FILE:         usbTx.vhd
-- AUTHOR:       D. Greenshields
-- DATE:         Oct 2020
--
-- DESCRIPTION:  Handles reading and writing of data to / from the usb chip
--
---------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use work.defs.all;
use work.LibDG.pulseSync;




entity usbDriver is
   port ( 	
		clock   					: in		std_logic;
				
		-- signals to/from usb chip
		usb_dataIn  	  	 	: in     std_logic_vector (15 downto 0);  --usb data from PHY
		usb_dataOut				: out    std_logic_vector (15 downto 0);  --usb data bus to PHY
      usb_txBufferReady 	: in  	std_logic;		--the tx buffer on the chip is ready to accept data 
      usb_rxDataAvailable  : in    	std_logic;     --usb data received flag
      usb_busWriteEnable 	: out   	std_logic;     --when high the fpga outputs data onto the usb bus
      usb_PKTEND  			: out 	std_logic;		--usb packet end flag
      usb_SLWR		        	: out 	std_logic;		--usb slave interface write signal
      usb_SLOE         		: out   	std_logic;    	--usb slave interface bus output enable, active low
      usb_SLRD     	   	: out   	std_logic;		--usb  slave interface bus read, active low
      usb_FIFOADR  	   	: out   	std_logic_vector (1 downto 0); -- usb endpoint fifo select, essentially selects the tx fifo or rx fifo

		
		-- fpga signals
		tx_busReq  				: in		std_logic;  -- request to lock the bus in tx mode, preventing any interruptions from usb read
		tx_busAck  				: out		std_logic;  
      din	          		: in   	std_logic_vector(15 downto 0);		
      txReq		        		: in   	std_logic;		
      txAck		        		: out   	std_logic;		
      dout           		: out   	std_logic_vector(31 downto 0);
		dout_valid     		: out		std_logic
);
end usbDriver;


	
architecture vhdl of usbDriver is


-- note
--
-- We will use the aynchronous timings specified in the usb chip datasheet for reading and writing,
-- therefore there is no need to use  usb clock supplied by the chip.
-- We can use system clock (40MHz) so long as we meet these timings.
--
-- As is standard practice, all input signals changing asynchronously to the system clock must be sychronized first.
-- This includes the two flags from the usb chip: 'tx buffer ready', and 'rx data available'.
--
--	There is only one data bus so an arbitration method is needed to switch between read and write.
-- The default mode will be reading, but if transmit is required, the data sending module
-- must request and receive acknowledgement for bus access before it may start sending.
-- During this mode the state machine will be locked into tx mode and read will be suspended
-- until the data sender de-asserts the bus request signal.
--
-- To transmit a data word once bus access is granted, apply the data to din with a rising edge on txReq.
-- Wait for a rising edge on txAck, then repeat the cycle for the next data word.
--
-- Output data is 32-bits made by concatenating two successive 16-bit words.
-- If a 16-bit word was received but no other word is received to complete the 32-bit word within a short time,
-- a timeout will reset the state machine so that it will restart looking for the first 16-bit word again.



-- Async read timings from datasheet:
--	
-- SLRD LOW 					50 ns min
-- SLRD HIGH 					50 ns min
-- SLRD to FLAGS 				70 ns max
-- SLRD to FIFO data out	15 ns max
-- SLOE to FIFO valid		10.5ns max
-- SLOE to FIFO hold			10.5ns max


-- Async write timings from datasheet:
--
-- SLWR LOW						50 ns min
-- SLWR HIGH					70 ns min
-- SLWR to FIFO DATA setup	10 ns min
-- FIFO data to SLWR hold	10 ns min
-- SLWR to FLAGS output		70 ns max


-- 
-- Aynchronous packet end: 
--
-- PKTEND LOW					50 ns min
-- PKTEND HIGH					50 ns min
-- PKTEND to FLAGS output	115 ns max


-- Note that there should also be added to the above timings a value
-- that includes fpga IO delays and also pcb trace delays.
--
-- A suggested reasonable value for this would be around 10ns
--
-- Note also that due synchronization of the input flags to the system clock,
-- a further clock cycle (25ns) will have to be added for any timings using these signals.



signal   txBufferReady 	: std_logic;		
signal	rxDataAvailable  : std_logic;   
signal	txReq_z			: std_logic;   


	
begin



USB_CTRL: process(clock)
variable tx_req_flag: std_logic:='0';			-- valid output data flag
variable tx_data: std_logic_vector(15 downto 0);
variable t: natural:= 0;
variable v: std_logic;			-- valid output data flag
variable w: natural;			-- wait cycle counter
variable word_count: natural;
variable state: natural:= 0;
begin
	if (rising_edge(clock.usb)) then
		
		-- sync
      txBufferReady <= usb_txBufferReady;
		rxDataAvailable <= usb_rxDataAvailable
		txReq_z <= txReq;
		
		-- edge detect
		if (txReq = '1' and txReq_z = '0') then tx_req_flag := '1'; tx_data := din; end if;
		
		v := '0';
		
		
		case state is
			
      
			when 0 =>		-- INIT
			
				usb_busWriteEnable <= '0';		-- enable output data from fpga onto usb bus (active high)
				usb_SLWR				<=	'1';
				usb_SLRD				<=	'1';
				usb_SLOE				<=	'1';		-- enable output data from usb device onto bus (active low)
				usb_PKTEND  		<= '1';		--usb packet end flag
				usb_FIFOADR  	   <= "00"; 	-- "00" = RX FIFO; "10" = TX FIFO
            din_ack				<= '0';
            dout_valid			<= '0';
            tx_busAck		   <= '0';      
				word_count := 0;
				state := 1;
				
				
			when 1 =>		-- RX DATA CHECK - setup
								
				usb_FIFOADR <= "00"; -- select the rx data fifo  
				usb_SLOE <= '0'; 
				usb_SLRD <= '0';	
				w := 0;					
				state := 2;		
			
			
			when 2 =>		-- RX DATA CHECK - read flags & get data if available
								
				w := w + 1; 
				if (w >= 5) then							-- wait clocks. Timing = 70 (slrd to flags) + 10 (fpga/pcb) + 25 (flag sync) = 105 ns = 5 clock cycles @ 40MHz
					if (rxDataAvailable = '1') then
						case word_count is
							when 0 => dout(15 downto 0) <= usb_dataIn;
							when 1 => dout(31 downto 16) <= usb_dataIn; 
						end case;
						word_count := word_count + 1;
						if (word_count >= 2) then v := '1'; t := 0; word_count := 0; end if;	-- 2 words received = valid data out
					end if;
					usb_SLOE <= '1'; 
					usb_SLRD <= '1';	
					w := 0;
					state := 3;
				end if;
						
				
			when 3 => 		-- RX DATA CHECK - set rd high & wait to meet the timing spec
			
				w := w + 1; 
				if (w >= 3) then			-- wait clocks. Timing = 50 (rd high width) + 10 (fpga/pcb) = 60 ns = 3 clock cycles @ 40MHz
					if (tx_busReq = '1') then
						tx_busAck <= '1';
						usb_busWriteEnable <= '1';
						usb_FIFOADR  	   <= "00"; 	-- "10" = TX FIFO
						usb_SLOE <= '1'; 
						usb_SLRD <= '1';	
						state := 4;
					else
						w := 0;
						state := 1;
				end if;
				
				
			when 4 => 		-- TX DATA REQUEST
				
				if (tx_req_flag = '1') then
					tx_req_flag := '0';
					txAck <= '1';
					usb_SLWR <= '0';
					usb_dataOut <= tx_data;
					w := 0;
					state := 5;
				elsif (tx_busReq = '0') then
					state := 7;	-- send packet end
				end if;
				
					
			when 5 =>		-- WR LOW WAIT
			
				txAck <= '0';
				w := w + 1; 
				if (w >= 4 and txBufferReady = '1') then			-- wait clocks. Timing = 70 (slwr to flags) + 10 (fpga/pcb) = 80 ns = 4 clock cycles @ 40MHz
					usb_SLWR <= '1';
					w := '0';
					state := 6;
				end if;
				
				
			when 6 =>		-- WR HIGH WAIT
			
				w := w + 1; 
				if (w >= 3) then			-- wait clocks. Timing = 70 (slwr high width) + 10 (fpga/pcb) = 80 ns = 4 clock cycles @ 40MHz, but note that we can subtract 1 because it will take 1 clock cycle before the next state change slwr again
					state := 4;
				end if;
				
				
			when 7 =>		-- PACKET END LOW
			
				usb_PKTEND <= '0';		
				w := 0;
				state := 8;
				
				
			when 8 =>		-- PACKET END HIGH
				
				w := w + 1; 
				if (w >= 3) then			-- wait clocks. Timing = 50 (pktend low) + 10 (fpga/pcb) = 60 ns = 3 clock cycles @ 40MHz-- wait clocks. 
					usb_PKTEND <= '1';
					state := 9;
				end if;
			
				
			when 9 =>		-- PACKET END WAIT
			
				w := w + 1; 
				if (w >= 3) then			-- wait clocks. Timing = 65 (pktend to flags - pktned low) + 10 (fpga/pcb) = 75 ns = 3 clock cycles @ 40MHz-- wait clocks. 
					tx_busAck <= '1';				
					state := 1;
				end if;
				
				
				
		end case;
		

		-- timeout timer for partial 32-bit words received- reset back to looking for first word
		t := t + 1; if (t > 4000000 and word_count = 1) then word_count := 0; end if;
		
		
		dout_valid <= v;
			

	end if;
	
end process;




   
   
   

end vhdl;



