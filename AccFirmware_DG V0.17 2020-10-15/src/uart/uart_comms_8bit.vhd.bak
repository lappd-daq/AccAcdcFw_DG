---------------------------------------------------------------------------------
-- Univ. of Chicago  
--    
--
-- PROJECT:      ANNIE 
-- FILE:         uart_comms.vhd
-- AUTHOR:       D. Greenshields
-- DATE:         June 2020
--
-- DESCRIPTION:  complete uart comms module-
--                serializer /deserializer 
--                8b10b encoder /decoder
--                link status monitor
--
---------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all; 
LIBRARY work;
use work.defs.all;
use work.components.uart;
use work.components.encoder_8b10b;
use work.components.decoder_8b10b;
use work.components.pulseSync;



ENTITY uart_comms IS 
	PORT
	(
		reset 			:  IN  STD_LOGIC;
		uart_clock 		:  IN  STD_LOGIC;
		sys_clock		:	IN  STD_LOGIC;
		linkStatusOk 	:  OUT STD_LOGIC;
		tx_in 			:  IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
		tx_in_valid 	:  IN  STD_LOGIC;
		tx_out 			:  OUT STD_LOGIC;
		rx_in 			:  IN  STD_LOGIC;
		rx_out 			:  OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		rx_out_valid	:  OUT STD_LOGIC
		
	);
END uart_comms;


ARCHITECTURE vhdl OF uart_comms IS 



type LINK_STATE_TYPE is (DOWN, CHECKING, UP, ERROR);
signal LINK_STATE : LINK_STATE_TYPE;

signal ein_dat	:	std_logic_vector(7 downto 0);		-- Encoder input data or code
signal kin_ena :	std_logic;		-- Data in is a special code, not all are legal.	
signal ein_ena :	std_logic;		-- Data (or code) input enable
signal eout_val :  std_logic;		-- Encoder data out is valid
signal dout_val :	std_logic;		-- data out valid 
signal dout_dat :  std_logic_vector(7 downto 0);	-- Decoder output
signal dout_k :	std_logic;		-- special code
signal dout_kerr		:  std_logic;		-- coding mistake detected

signal TX_FIFO_rdreq					:  std_logic;
signal TX_FIFO_EMPTY					:  std_logic;
signal TX_FIFO_Q						:  std_logic_vector(7 downto 0);

signal rxLowByte						:  std_logic_vector(7 downto 0);
signal OUT_DATA						:  std_logic_vector(7 downto 0);
signal STATUS_CODE					:  std_logic_vector(7 downto 0);
signal RX_DATA10						:	std_logic_vector(9 downto 0);
signal TX_DATA10						: 	std_logic_vector(9 downto 0);
signal TX_RDreg						: std_logic;
signal RX_RDreg						: std_logic;
signal linkStatusOk_z				: std_logic;
signal newStatusCode    		   : std_logic;
signal tx_in_valid_z    		   : std_logic;
signal tx_buf_full_z    		   : std_logic;
signal rx_out_valid_z    		   : std_logic;

TYPE txState_TYPE is (SEND_DATA, DATA_ACK);
signal txState		: txState_TYPE;


signal tx_data_ack	:  std_logic;		-- data acknowledge from the UART
signal tx_ready			:  std_logic;
signal rx_data_valid :  std_logic;		-- new data from the UART


-- rx fifo signals
signal data_out_rdy		:	STD_LOGIC;
signal data_out16			:	STD_LOGIC_VECTOR(15 downto 0);
signal rx_fifo_empty		:	STD_LOGIC;

BEGIN 


--clocking notes:
-- processing is done with uart clock but I/Os are on the system clock


-- Currently the data rate is 10Mbaud
--
-- It could be changed to 40Mbaud
-- this would give a byte input rate of 4Mbytes/sec, i.e. 250ns per byte
-- With the post-decoder processing running at 40MHz clock,
-- there is still time for 9 or 10 clock cycles to process each byte.




-- Data
--
-- tx input is 32 bit
-- rx output is 16 bit






-----------------------------
-- SERIALIZER / DESERIALIZER
-----------------------------
uart0 : uart
	GENERIC map 
	(	dataLen => 10, clockDivRatio	=> 16)
	PORT map
	(
		clock => uart_clock,
		reset => reset,
		
		txData => TX_DATA10,
		txData_valid => eout_val,
		txData_ack	=> tx_data_ack,
		txReady	=> tx_ready,
		txOut => tx_out,
		
		rxData => RX_DATA10,
		rxData_valid => rx_data_valid,
		rxIn => rx_in
	);

  
  
-----------------------------
-- ENCODER
-----------------------------
tx_enc : encoder_8b10b
	GENERIC MAP( METHOD => 1 )
	PORT MAP(
		clk => uart_clock,
		rst => reset,
		kin_ena => kin_ena,		-- Data in is a special code, not all are legal.	
		ein_ena => ein_ena,		-- Data (or code) input enable
		ein_dat => ein_dat,		-- 8b data in
		ein_rd => TX_RDreg,		-- running disparity input
		eout_val => eout_val,		-- data out is valid
		eout_dat => TX_DATA10,		-- data out
		eout_rdcomb => open,		-- running disparity output (comb)
		eout_rdreg => TX_RDreg);		-- running disparity output (reg)



-----------------------------
-- TX STATE MACHINE
-----------------------------

-- synchronize
TX_SYNC: pulseSync port map (sys_clock, uart_clock, tx_in_valid, tx_in_valid_z);

-- Adds frame header info to valid input data and sends bytes to encoder
-- also sends status info whenever status changes
process(uart_clock)
variable bytesDone: natural;
variable done: boolean;
variable txFrame : std_logic_vector(47 downto 0); -- 16 bit header + 32 bit data
begin
	if (rising_edge(uart_clock)) then
			
		 
      if (reset = '1') then
			
         txState <= SEND_DATA;
			kin_ena <= '0';
			ein_ena <= '0';
			done := true;			
			
         
      else 
			

			case txState is			
            
            
            when SEND_DATA =>
				
					if (tx_ready = '1') then
						
						if (newStatusCode = '1') then -- send new status code as top priority
							ein_dat <= STATUS_CODE;
							ein_ena <= '1';
							kin_ena <= '1';
							txState <= DATA_ACK;
						
						else
							
							if (done and tx_in_valid_z = '1' and linkStatusOk_z = '1') then 
								txFrame := STARTWORD_8a & STARTWORD_8b & tx_in;
								done := false; 
								bytesDone := 0;
							end if;
							
							if (not done) then
								ein_dat <= txFrame(47 downto 40);	-- send msb first
								txFrame := txFrame(39 downto 0) & X"00"; -- shift next byte into place
								bytesDone := bytesDone + 1;
								if (bytesDone >= 6) then done := true; end if;
								ein_ena <= '1';
								kin_ena <= '0';
								txState <= DATA_ACK;
							end if;
					
						end if;
					
					end if;
					

				
				when DATA_ACK =>
				
					ein_ena <= '0';
					kin_ena <= '0';
					if (tx_data_ack = '1') then
						txState <= SEND_DATA;
					end if;
            
            
			end case;
		end if;
	end if;
end process;



-----------------------------
-- DECODER
-----------------------------
rx_dec : decoder_8b10b
	GENERIC MAP(
		RDERR =>1,
		KERR => 1,
		METHOD => 1)
	PORT MAP(
		clk => uart_clock,
		rst => reset,
		din_ena => rx_data_valid,		-- 10b data ready
		din_dat => RX_DATA10,		-- 10b data input
		din_rd => RX_RDreg,		-- running disparity input
		dout_val => dout_val,		-- data out valid
		dout_dat => dout_dat,		-- data out
		dout_k => dout_k,		-- special code
		dout_kerr => dout_kerr,		-- coding mistake detected
		dout_rderr => open,		-- running disparity mistake detected
		dout_rdcomb => open,		-- running disparity output (comb)
		dout_rdreg => RX_RDreg);		-- running disparity output (reg)



		
-- synchronize
DEC_VALID_OUT_SYNC: pulseSync port map (uart_clock, sys_clock, rx_out_valid_z, rx_out_valid);
		

-----------------------------
-- RX WORD GENERATOR
-----------------------------
-- takes in bytes and turns them into 16 bit words


process(uart_clock)
   variable getLowerByte : boolean;
   variable v:  std_logic;	-- 'valid' flag
begin
	if (rising_edge(uart_clock)) then	
     
      if (reset = '1') then
			
			rx_out_valid_z	<= '0';
         getLowerByte := true;
		
      else
			
         v := '0';
         if (dout_val = '1') then      -- valid data received from decoder
				
				if (dout_kerr = '1') then  --  decoder error
					getLowerByte := true;      --  reset the byte position flag				       
				elsif (dout_k = '0') then  -- normal data, not special code
					if (getLowerByte) then                     
						rxLowByte <= dout_dat;
					else                    
						rx_out <= dout_dat & rxLowByte;
						v := '1';
					end if;
					getLowerByte := not getLowerByte;                     
				end if;
				rx_out_valid_z	<= v;	 
		 
			end if;
         
				
            
      end if;
	end if;
end process;
	
		



-----------------------------
-- RX LINK STATUS CHECK
-----------------------------
process(uart_clock)
variable counter 	: natural;
variable dff1,dff2,dff3		: std_logic;
variable edge		: std_logic;
begin
	if (rising_edge(uart_clock)) then
		
		
      if (reset = '1') then
			
         dff1		:= '0';
			dff2		:= '0';
			dff3		:= '0';
			edge		:= dff2 xor dff3;
			counter	:= 0;
			LINK_STATE <= DOWN;
		
      else 
			
         edge 	:= dff2 xor dff3;
			dff3  := dff2;
			dff2	:= dff1;
			dff1  := rx_in;
			case LINK_STATE is
				when DOWN =>
					if edge = '1' then
						counter := 0;
						LINK_STATE <= CHECKING;
					end if;
				when others =>
					if dout_val = '1' then
						if dout_kerr = '0' then
							counter := 0;
							LINK_STATE <= UP;
						else
							counter := 0;
							LINK_STATE <= ERROR;
						end if;
					else
						counter := counter + 1;
						if counter > 160000000 then -- check if we're past timeout
							LINK_STATE <= DOWN;
							counter := 0;
						end if;
					end if;
			end case;
		end if;
	end if;
end process;

linkStatusOk_z <= '1' when LINK_STATE = UP else '0';



-- Pick a default code based on link status
process(uart_clock)
variable prev_status_code: std_logic_vector(7 downto 0) := K28_1;
begin
	if (rising_edge(uart_clock)) then
		if (reset = '1') then
			STATUS_CODE <= K28_1;	
		else
			case LINK_STATE is
				when DOWN => 		STATUS_CODE <= K28_1;
				when CHECKING =>	STATUS_CODE <= K28_7;
				when UP => 			STATUS_CODE <= K28_5;
				when others => 	STATUS_CODE <= K27_7;
			end case;         
		end if;
      if (STATUS_CODE /= prev_status_code) then
         newStatusCode <= '1';
      else
         newStatusCode <= '0';
      end if;
      prev_status_code := STATUS_CODE;
   end if;
end process;




LINK_CHECK_SYNC: process(sys_clock)
begin
	if (rising_edge(sys_clock)) then
		linkStatusOk <= linkStatusOk_z;
	end if;
end process;




END vhdl;









