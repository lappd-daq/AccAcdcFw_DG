---------------------------------------------------------------------------------
-- Univ. of Chicago HEP / electronics design group
--    -- + KICP 2015 --
--
-- PROJECT:      ACC
-- FILE:         usbWrapperACC.vhd
-- AUTHOR:       e.oberla
-- EMAIL         ejo@uchicago.edu
-- DATE:         2016 (modified from 2012 version)
--
-- DESCRIPTION:  specific USB interfacing for ACC project
--
---------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

use work.defs.all;

entity rxCommandHandler is
	generic(
		instruct_width			: integer := 32);

	port (
		reset						: 	in   	std_logic;
		clock				      : 	in		std_logic;        --usb clock
      cmdIn		      	   : in std_logic_vector(instruct_width-1 downto 0);
      cmdIn_valid				: in std_logic;
		cmdOut 		         : 	out	std_logic_vector(instruct_width-1 downto 0);
		cmdOut_valid			: 	out	std_logic;
		xUSB_START				:	in		std_logic_vector(N-1 downto 0);
		RDY						:	out	std_logic_vector(1 downto 0);
		xUSB_DONE				:	out	std_logic_vector(N-1 downto 0);
		xSOFT_TRIG				:	out	std_logic_vector(N-1 downto 0);
		xSET_DC_MASK			:	out	std_logic_vector(N-1 downto 0);
		xSLWR						:	out	std_logic;
		xCC_SYNC_IN				:  in		std_logic;
		xCC_READ_MODE			: 	out 	std_logic_vector(2 downto 0);
		xSET_TRIG_MODE			: 	out 	std_logic;
		xCC_SOFT_FIFO_MANAGE : 	out	std_logic;
		
		xUSBUSY					: 	out  	std_logic;
		
      xTRIG_DELAY 			: 	out  	std_logic_vector(6 downto 0);
		xRESET_TIMESTAMP 		: 	out  	std_logic;
		
      
      xSET_TRIG_SOURCE  	      :  out 	std_logic_vector(2 downto 0);
		
      xHARD_RESET       	: 	out 	std_logic;
		xCC_SYNC_OUT			:  out	std_logic;
		xTRIG_VALID				: 	out	std_logic;
	   xSOFT_TRIG_BIN			:  out	std_logic_vector(2 downto 0);
		xWAIT_FOR_SYS			:	out	std_logic);

		
end rxCommandHandler;

architecture vhdl of rxCommandHandler is

	
	type State_type is(st1_WAIT, st1_TARGET);
	signal state : State_type;
	
	signal read_cc_buffer				: 	std_logic;		
	signal SET_TRIG_SOURCE				: 	std_logic_vector(2 downto 0);
		

	--signals for CC 32 bit instructions
	signal cc_only_instruct_rdy		: std_logic;
	signal CC_INSTRUCT_RDY				: std_logic;
	signal CC_INSTRUCTION				: std_logic_vector(instruct_width-1 downto 0);
	signal CC_INSTRUCTION_tmp			: std_logic_vector(instruct_width-1 downto 0);
	--signals for USB commands: synching, interpreting, etc	
	type handle_cc_instruct_state_type is (ready, get_instruct, check_sync, get_synced, send_instruct, be_done );
	
	signal handle_cc_instruct_state: handle_cc_instruct_state_type;
	signal handle_cc_only_instruct_state: handle_cc_instruct_state_type;
				
	signal CC_READ_MODE		: std_logic_vector(2 downto 0);
	signal TRIG_MODE	   	: std_logic;
	signal TRIG_DELAY			: std_logic_vector (6 downto 0);
	signal RESET_DLL_FLAG	: std_logic;
	signal HARD_RESET       : std_logic := '0';
	signal WAKEUP_USB 		: std_logic := '0';
		
	--USB_instructions: TMP, GOOD => for syncing to master clock
	signal trig_valid					: std_logic;
	signal trig_valid_GOOD			: std_logic;
	signal trig_valid_TMP			: std_logic;
	signal trig_valid_CC_only		: std_logic;
	
	signal SOFT_TRIG					: std_logic;
	signal SOFT_TRIG_TMP				: std_logic;
	signal SOFT_TRIG_GOOD			: std_logic;
	
	signal WAIT_FOR_SYS 				: std_logic;
	
	signal SOFT_TRIG_MASK			: std_logic_vector(N-1 downto 0);
	signal SOFT_TRIG_MASK_TMP		: std_logic_vector(N-1 downto 0);
	signal SOFT_TRIG_MASK_GOOD		: std_logic_vector(N-1 downto 0);
	
	signal SOFT_TRIG_BIN				: std_logic_vector(2 downto 0);
	signal SOFT_TRIG_BIN_TMP		: std_logic_vector(2 downto 0);
	signal SOFT_TRIG_BIN_GOOD		: std_logic_vector(2 downto 0);
	
	signal RESET_TIME					: std_logic;
	signal RESET_TIME_TMP			: std_logic;
	signal RESET_TIME_GOOD			: std_logic;
	
	signal CC_SOFT_DONE				: std_logic;
	signal CC_SOFT_DONE_TMP			: std_logic;
	signal CC_SOFT_DONE_GOOD		: std_logic;
	
	signal INSTRUCT_MASK				: std_logic_vector(N-1 downto 0);
	signal INSTRUCT_MASK_TMP		: std_logic_vector(N-1 downto 0);
	signal INSTRUCT_MASK_GOOD		: std_logic_vector(N-1 downto 0);

	signal SYNC_TRIG			: std_logic;
	signal SYNC_MODE			: std_logic;
	signal SYNC_TIME			: std_logic;
	signal SYNC_RESET			: std_logic;
	--syncing signals between boards 
	signal CC_SYNC				: std_logic;	--from USB, clocked on 48 MHz
	signal CC_SYNC_REG		: std_logic;  	--registered on SYSclock
	signal CC_SYNC_IN_REG	: std_logic;	--registered on SYSclock
	signal soft_trig_ready_good  				:	std_logic;
	
	
	
	
	begin	
--------------	
	xCC_READ_MODE <= CC_READ_MODE;	


	xCC_SOFT_FIFO_MANAGE		<= CC_SOFT_DONE;
	xSET_DC_MASK		<= INSTRUCT_MASK_GOOD;
	--
	xSET_TRIG_MODE		<= TRIG_MODE;
	xSET_TRIG_SOURCE 	<= SET_TRIG_SOURCE;  
	xTRIG_DELAY 		<= TRIG_DELAY;
	xRESET_TIMESTAMP 	<= RESET_DLL_FLAG;
	xHARD_RESET       <= HARD_RESET;
	xCC_SYNC_OUT		<= CC_SYNC_REG;
	xTRIG_VALID			<= trig_valid;
	XWAIT_FOR_SYS 		<= WAIT_FOR_SYS;
	
	
		
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--Processes to handle USB commands (from PC): synching, interpreting, etc	
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

process(clock)
begin
	if (rising_edge(clock)) then
		if (reset = '1') then
			CC_SYNC_REG 	<= '0';
		else
			CC_SYNC_REG 	<= CC_SYNC;
		end if;
	end if;
end process;		
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
	process(clock)
	begin
		if (rising_edge(clock)) then
	
			if (reset = '1')  then
				xSOFT_TRIG 		<= (others=>'0');
				xSOFT_TRIG_BIN <= (others=>'0');
			elsif (soft_trig_ready_good = '0')  then
				xSOFT_TRIG 		<= (others=>'0');
				xSOFT_TRIG_BIN <= (others=>'0');
			else
				xSOFT_TRIG 		<= SOFT_TRIG_MASK_GOOD;
				xSOFT_TRIG_BIN <= SOFT_TRIG_BIN_GOOD;
			end if;
		
		end if;
	end process;

	
	-----
	--sync commands between ACC boards:
	-----
	process(clock)
	variable i : natural;	
	begin
		if (rising_edge(clock)) then
      
         if (reset = '1') then 
            
            i := 0;
            SOFT_TRIG_MASK_TMP 	<= (others=>'0');
            SOFT_TRIG_MASK_GOOD 	<= (others=>'0');
            SOFT_TRIG_BIN_TMP 	<= (others=>'0');
            SOFT_TRIG_BIN_GOOD 	<= (others=>'0');
            CC_SOFT_DONE_TMP     <= '0';
            CC_SOFT_DONE_GOOD		<= '0';
            RESET_TIME_TMP 		<= '0';
            RESET_TIME_GOOD		<= '0';	
            trig_valid_TMP			<= '0';
            trig_valid_GOOD		<= '0';
            handle_cc_only_instruct_state <= ready;
		
         else
			
            case handle_cc_only_instruct_state is

               when ready =>                   
                  --same as RESET condition, except for trig_valid flag (only change value when toggled)                  done_with_cc_only_instruction<= '0';
                  i := 0;
                  SOFT_TRIG_GOOD			<= '0';
                  SOFT_TRIG_MASK_TMP 	<= (others=>'0');
                  SOFT_TRIG_MASK_GOOD 	<= (others=>'0');
                  
                  if (cc_only_instruct_rdy = '1') then
                     handle_cc_only_instruct_state <= get_instruct;
                  end if;
			
               when get_instruct=>
                  SOFT_TRIG_TMP 			<= SOFT_TRIG;	 
                  SOFT_TRIG_MASK_TMP 	<= SOFT_TRIG_MASK;
                  SOFT_TRIG_BIN_TMP		<= SOFT_TRIG_BIN;
                  trig_valid_TMP			<= trig_valid;
					
                  if i > 2 then
                     i := 0;
                     handle_cc_only_instruct_state <= check_sync;
                  else
                     i:=i+1;
                  end if;

               when check_sync =>			
                  if CC_SYNC_REG = '1' then						--
                     i:=0;
                     handle_cc_only_instruct_state <= get_synced;
                     --
                  else 
                     i:=0;
						handle_cc_only_instruct_state <= send_instruct;
                  end if;
		
               when get_synced =>
                  if CC_SYNC_REG = '0' then
                     i:=0;
                     handle_cc_only_instruct_state <= send_instruct;
                  elsif i > 50000 then
                     i:=0;
                     handle_cc_only_instruct_state <= send_instruct;
                  else 
                     i:=i+1;
                     handle_cc_only_instruct_state <= get_synced;
                  end if;
					
               when send_instruct =>						
                  SOFT_TRIG_GOOD 			<= SOFT_TRIG_TMP;	 
                  SOFT_TRIG_MASK_GOOD 		<= SOFT_TRIG_MASK_TMP;
                  SOFT_TRIG_BIN_GOOD		<= SOFT_TRIG_BIN_TMP;
                  trig_valid_GOOD			<= trig_valid_TMP;
                  soft_trig_ready_good    <= '1';							
                  if i > 20 then
                     i:= 0;
                     handle_cc_only_instruct_state <= be_done;
                  else
                     i:= i+1;

                  end if;
					
               when be_done =>
                  i:=0;
                  SOFT_TRIG_MASK_TMP 	<= (others=>'0');
                  SOFT_TRIG_BIN_TMP    <= (others=>'0');
                  handle_cc_only_instruct_state <= ready;
				
               when others=>
                  handle_cc_only_instruct_state <= get_instruct;
			
            end case;
         end if;
		end if;
	end process;	
--------------------------------------------------------------------------------
------------------------------------------------------------------------------
--------------------------------------------------------------------------------	
	process(clock)
	variable i : natural;	
	begin
		if (rising_edge(clock)) then
      
         if (reset = '1') then 
            
            cmdOut 	<= X"00000000";
            cmdOut_valid	<= '0';
            CC_INSTRUCTION_tmp 	<= (others=>'0');
            INSTRUCT_MASK_GOOD   <= (others=>'0');
            INSTRUCT_MASK_TMP    <= (others=>'0');
            i := 0;
            handle_cc_instruct_state <= ready;
		
         else
         
            case handle_cc_instruct_state is

               when ready =>                   
                  cmdOut 	<= (others=>'0');
                  cmdOut_valid	<= '0';
                  CC_INSTRUCTION_tmp 	<= (others=>'0');
                  INSTRUCT_MASK_GOOD   <= (others=>'0');
                  INSTRUCT_MASK_TMP    <= (others=>'0');
                  i := 0;
                  if (CC_INSTRUCT_RDY = '1') then
                     handle_cc_instruct_state <= get_instruct;
                  end if;
						
               when get_instruct=>
                  CC_INSTRUCTION_tmp 	<= CC_INSTRUCTION;
                  INSTRUCT_MASK_TMP		<= INSTRUCT_MASK;
                  if i > 2 then
                     i := 0;
                     handle_cc_instruct_state <= check_sync;
                  else
                     i:=i+1;
                  end if;							
					
               when check_sync =>
                  if CC_SYNC_REG = '1' or CC_SYNC_IN_REG = '1' then
                     handle_cc_instruct_state <= get_synced;
				
                  else 
                     handle_cc_instruct_state <= send_instruct;
                  end if;
		
               when get_synced =>
                  i := 0;
                  if CC_SYNC_REG = '0' and CC_SYNC_IN_REG = '0' then
                     handle_cc_instruct_state <= send_instruct;
                  else
                     handle_cc_instruct_state <= get_synced;
                  end if;
					
               when send_instruct =>
                  INSTRUCT_MASK_GOOD	<= INSTRUCT_MASK_TMP;
                  cmdOut 	<= CC_INSTRUCTION_tmp;
                  cmdOut_valid <= '1';
                  if i > 20 then
                     i:= 0;
                     handle_cc_instruct_state <= ready;
                  else
                     i:= i+1;
                  end if;
			
            end case;
         end if;
		end if;
	end process;


	
	process(clock)
	variable delay 	: natural range 0 to 50;
	variable delay2 	: natural range 0 to 5;

	begin
	if (rising_edge(clock)) then
	
		if (reset = '1') then
			
			--signals:
			SOFT_TRIG			<= '0';		
			CC_INSTRUCTION 	<=(others=>'0');
			SOFT_TRIG_MASK 	<=(others=>'0');
			SOFT_TRIG_BIN  	<=(others=>'0');
			CC_SOFT_DONE 		<= '0';
			CC_READ_MODE 		<= "000";
			TRIG_MODE 			<= '0';
			TRIG_DELAY 			<= (others => '0');
			INSTRUCT_MASK	   <= (others => '0');
			delay 				:= 0;	
			delay2 				:= 0;	
			RESET_DLL_FLAG 	<= '0';
			read_cc_buffer 	<= '0';
			CC_INSTRUCT_RDY	<= '0';	
			HARD_RESET     	<= '0';
			WAKEUP_USB     	<= '0';
			CC_SYNC        	<= '0';
			trig_valid			<= '0';
			SYNC_TRIG			<= '0';
			SYNC_MODE			<= '0';
			SYNC_TIME			<= '0';
			SYNC_RESET			<= '0';
			state       		<= st1_WAIT;
--------------------------------------------------------------------------------				
		else
--------------------------------------------------------------------------------				
			case	state is	
--------------------------------------------------------------------------------
				when st1_WAIT=>
--------------------------------------------------------------------------------					
					RESET_DLL_FLAG 	<= '0';
					CC_SOFT_DONE   	<= '0';
					CC_INSTRUCT_RDY	<= '0';
					cc_only_instruct_rdy <= '0';
					read_cc_buffer 	<= '0';
					SOFT_TRIG	   	<= '0';
					HARD_RESET     	<= '0';
					WAKEUP_USB     	<= '0';
					SOFT_TRIG_MASK		<= (others=>'0');
					SOFT_TRIG_BIN  	<= (others=>'0');
					SYNC_TRIG			<= '0';
					SYNC_MODE			<= '0';
					SYNC_TIME			<= '0';
					SYNC_RESET			<= '0';
					delay 				:= 0;	

					if (cmdIn_valid = '1') then --instruction is ready to be interpreted
						if delay2 > 0 then
							delay2 := 0;
							state <= st1_TARGET;
						else
							delay2 := delay + 1;
						end if;		
					end if;
--------------------------------------------------------------------------------				
				when st1_TARGET=>
--------------------------------------------------------------------------------
					--specifies which board(s) to send instruction
					INSTRUCT_MASK(3 downto 0) <= cmdIn(28 downto 25);
					delay2 := 0;
--------------------------------------------------------------------------------
					case cmdIn(19 downto 16) is
--------------------------------------------------------------------------------
						when x"E" =>	--SOFT_TRIG
							cc_only_instruct_rdy <= '1';
							SYNC_TRIG <= '1';
							SOFT_TRIG <= '1';	 
							SOFT_TRIG_MASK(3 downto 0) <= cmdIn(3 downto 0);
							SOFT_TRIG_BIN	<= cmdIn(6 downto 4);
							if delay > 8 then
								delay := 0;
								state <= st1_WAIT;
							else
								delay := delay + 1;
							end if;		
		
						when x"D" => --ALIGN_LVDS_FLAG <= '1';	 		
							state <= st1_WAIT;		
			
						when x"C" =>
							CC_READ_MODE <= cmdIn(2 downto 0);
							if cmdIn(4) = '1' then
								TRIG_MODE <= cmdIn(3);
								TRIG_DELAY  (6 downto 0) <= cmdIn(11 downto 5);
								SET_TRIG_SOURCE (2 downto 0) <= cmdIn(14 downto 12);
							end if;
	
							if delay > 10 then
								delay := 0;
								state <= st1_WAIT;
			
							--this is a hack:
							-- basically, only want to send along to AC/DC if certain conditions apply
							-- also want to only read CC info buffer if read mode = 0b101
							else
								delay := delay + 1;
								if delay > 1 then
									case CC_READ_MODE is
										when "101" =>
											read_cc_buffer <= '1';
											CC_INSTRUCTION <= (others=>'0');
											CC_INSTRUCT_RDY<= '0';
										when "110" =>
											read_cc_buffer <= '0';
											CC_INSTRUCTION <= (others=>'0');
											CC_INSTRUCT_RDY<= '0';
										---only send-along data to AC/DC cards when 111 or 000
										when "111" =>	
											trig_valid_CC_only <= '1';
											read_cc_buffer <= '0';
											CC_INSTRUCTION <= (others=>'0');
											CC_INSTRUCT_RDY<= '0';
										when "000" =>
											trig_valid_CC_only <= '0';
											read_cc_buffer <= '0';
											CC_INSTRUCTION <= cmdIn;
											CC_INSTRUCT_RDY<= '1';
										when others =>
											read_cc_buffer <= '0';
											CC_INSTRUCTION <= (others=>'0');
											CC_INSTRUCT_RDY<= '0';
									end case;
								end if;
							end if;
		
						
						when x"B" =>
							if cmdIn(2) = '1' then
								cc_only_instruct_rdy <= '1';
								trig_valid <= cmdIn(1);
								CC_INSTRUCTION <= cmdIn;
								CC_INSTRUCT_RDY<= '1';
								SYNC_MODE <= '1';
							elsif cmdIn(4) = '1' then
								cc_only_instruct_rdy <= '0';
								trig_valid <= trig_valid;
								CC_SYNC <= cmdIn(3);
								CC_INSTRUCTION <= (others=>'0');
								CC_INSTRUCT_RDY<= '0';
							else
								cc_only_instruct_rdy <= '0';
								trig_valid <= trig_valid;
								CC_SOFT_DONE <= cmdIn(0);
								CC_INSTRUCTION <= cmdIn;
								CC_INSTRUCT_RDY<= '1';
							end if;

							if delay > 10 then
								delay := 0;
								state <= st1_WAIT;
							else
								delay := delay + 1;
							end if;					
		
						when x"4" =>
							--hard reset conditions
							case cmdIn(11 downto 0) is
								when x"FFF" =>
									cc_only_instruct_rdy <= '1';
									--SYNC_TRIG  <= '1';
									--ALIGN_LVDS_FLAG 		<= '1';
									SOFT_TRIG  				<= '1';
									SOFT_TRIG_MASK 		<= (others=>'1');
									HARD_RESET 				<= '1';
									WAKEUP_USB 				<= '0';
								when x"EFF" =>
									cc_only_instruct_rdy <= '0';
									--SYNC_TRIG  <= '0';
									--ALIGN_LVDS_FLAG 		<= '0'; 
									SOFT_TRIG  				<= '0';
									SOFT_TRIG_MASK 		<= (others=>'0');
									HARD_RESET 				<= '0';
									WAKEUP_USB 				<= '1';
								when others=>
									--SYNC_TRIG  <= '0';
									cc_only_instruct_rdy <= '0';
									--ALIGN_LVDS_FLAG 		<= '0';
									SOFT_TRIG  				<= '0';
									SOFT_TRIG_MASK 		<= (others=>'0');
									HARD_RESET 				<= '0';
									WAKEUP_USB 				<= '0';
							end case;
			
							--otherwise, send instructions over SERDES
							case cmdIn(15 downto 12) is
								when x"1" => RESET_DLL_FLAG <= '1';
								when x"3" => RESET_DLL_FLAG <= '1';
								when x"F" => RESET_DLL_FLAG <= '1';
								when others => RESET_DLL_FLAG <= '0';
							end case;	
			
							CC_INSTRUCTION <= cmdIn;
							CC_INSTRUCT_RDY<= '1';
			
							if delay > 20 then
								delay := 0;
								state <= st1_WAIT;
							else
								delay := delay + 1;
							end if;	

						when others =>
							CC_INSTRUCTION <= cmdIn;
							CC_INSTRUCT_RDY<= '1';
							
							--helps to know if the ACDC is waiting for 
							--a sys signal, this gets passed over to triggerAndTime.
							--(15 downto 12 flags if this is the lo vs hi cmd. wait for sys
							-- comes on lo command)
							if cmdIn(19 downto 16) = x"7" and cmdIn(15 downto 12) = x"0" then
								WAIT_FOR_SYS <= cmdIn(1);
							end if;
							
							if delay > 8 then
								delay := 0;
								state <= st1_WAIT;
							else
								delay := delay + 1;
							end if;
							
					end case;
			end case;
		end if;
	end if;
end process;

	--------------------------------------				
end vhdl;