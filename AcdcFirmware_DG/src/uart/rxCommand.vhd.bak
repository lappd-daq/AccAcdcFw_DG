---------------------------------------------------------------------------------
-- Univ. of Chicago  
--    
--
-- PROJECT:      ANNIE 
-- FILE:         uart_comms_8bit.vhd
-- AUTHOR:       D. Greenshields
-- DATE:         July 2020
--
-- DESCRIPTION:  uart comms module-
--                rx: receives 6 byte frames, with 2 header bytes and 4 instruction bytes
--						tx: transmits data frames
--
---------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all; 
LIBRARY work;
use work.defs.all;
use work.components.uart;
use work.components.pulseSync;



ENTITY uart_comms_8bit IS 
	PORT
	(
		reset 				:  IN  STD_LOGIC;
		uart_clock 			:  IN  STD_LOGIC;
		sys_clock			:	IN  STD_LOGIC;
		txIn 					:  IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
		txIn_valid 			:  IN  STD_LOGIC;
		txOut 				:  OUT STD_LOGIC;
		rxIn 					:  IN  STD_LOGIC;
		rxOut 				:  OUT STD_LOGIC_VECTOR(31 DOWNTO 0);	-- instruction word out
		rxOut_valid			:  OUT STD_LOGIC;
		rxWordAlignReset  :  in STD_LOGIC;
		rxError				:  OUT STD_LOGIC		-- can be used to request a retransmission
		
	);
END uart_comms_8bit;


ARCHITECTURE vhdl OF uart_comms_8bit IS 



signal	rxLowByte					:  std_logic_vector(7 downto 0);
signal	rxByte						:	std_logic_vector(7 downto 0);
signal	rxByte_valid				:	std_logic;
signal	txAck_z						: 	std_logic_vector(7 downto 0);
signal	txByte_valid				: 	std_logic;
signal	txAck	:  std_logic;		-- data acknowledge from the UART
signal	txReady			:  std_logic;
signal	txIn_valid_z    		   : std_logic;
signal	rxOut_valid_z   		   : std_logic;


TYPE txState_TYPE is (SEND_DATA, DATA_ACK);
signal	txState		: txState_TYPE;




BEGIN 


--clocking notes:
-- processing is done with uart clock but I/Os are on the system clock



-- Data
--
-- tx input is 32 bit
-- rx output is 16 bit




-----------------------------
-- SERIALIZER / DESERIALIZER
-----------------------------
uart0 : uart
	GENERIC map 
	(	dataLen => 8, clockDivRatio	=> 8)
	PORT map
	(
		clock => uart_clock,
		reset => reset,	
		txData => txIn,
		txData_valid => txIn_valid_z,
		txData_ack	=> txAck_z,
		txReady	=> txReady_z,
		txOut => txOut,	
		rxData => rxByte,
		rxData_valid => rxByte_valid,
		rxError => rxError,
		rxIn => rxIn
	);

  
  
-----------------------------
-- TX
-----------------------------


-- The purpose of this section is to synchronize the tx i/o signals on sysClk to the uart clock
-- no actual data processing is done here
TX_SYNC0: pulseSync port map (sys_clock, uart_clock, txIn_valid, txIn_valid_z);
TX_SYNC1: pulseSync port map (uart_clock, sys_clock, txAck_z, txAck);

TX_SYNC2: process(sys_clock)
begin
	if (rising_edge(sys_clock)) then
		txReady <= txReady_z;
	end if;
end process;


		
		

-----------------------------
-- RX COMMS
-----------------------------
-- looks for a specific 2 byte header indicating start of frame, 
-- then takes the next 4 bytes as a valid instruction word



-- synchronize
DEC_VALID_OUT_SYNC: pulseSync port map (uart_clock, sys_clock, rxOut_valid_z, rxOut_valid);


process(uart_clock)
   variable i: natural; -- byte index pos within the received frame
   variable v:  std_logic;	-- 'valid' flag
	variable rxReg	: std_logic_vector(31 downto 0);	-- temporary storage of the rx bytes as they come in
begin
	if (rising_edge(uart_clock)) then	
     
      if (reset = '1' or rxWordAlignReset = '1') then
			
			rxOut_valid_z	<= '0';
			i := 0;
		
      else
			
         v := '0';
         if (rxByte_valid = '1') then      -- valid data received from uart			
				case i is
					
					when 0 =>
						if (rxByte = STARTWORD_8a) then  i := i + 1; end if;   -- got first byte of header
					
					when 1 => 
						if (rxByte = STARTWORD_8b) then  i := i + 1;	else i := 0; end if;  -- got second byte of header (if not then revert to looking for first byte again)
					
					when others =>			-- got header, now wait for data
						rxReg := rxReg(23 downto 0) & rxByte;		-- shift in the msb first
						i := i + 1;
						if (i >= 6) then 	-- now we have received 6 bytes (2 header + 4 data)
							rxOut <= rxReg;		-- output the 32-bit instruction word
							v := '1';
							i := 0;		-- wait for a new frame
						end if;
						
						
				end case;
			end if;			
			
			rxOut_valid_z	<= v;	 	 
            
      end if;
	end if;
end process;
	
		



END vhdl;









